# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    routes_data:
        # TODO: перенести сюда значения csrf_token_id из контроллеров
        partitura_main_index:
            view: 'genesis/main/blog.html.twig'
        partitura_profile_main_info:
            view: 'genesis/profile/main_info.html.twig'
            csrf_token_id: Partitura\Controller\Profile\ProfileController::MAIN_INFO_CSRF_TOKEN_ID
            filler: [ 'Partitura\Filler\UserFieldValuesFiller', 'fillUserFieldValues' ]
        partitura_profile_security:
            view: 'genesis/profile/security.html.twig'
            csrf_token_id: Partitura\Controller\Profile\ProfileController::SECURITY_CSRF_TOKEN_ID
        partitura_profile_banned:
            view: 'genesis/profile/banned.html.twig'
        partitura_login:
            view: 'genesis/admin/login.html.twig'
            csrf_token_id: Partitura\Controller\LoginController::LOGIN_CSRF_TOKEN_ID
        partitura_admin_login:
            view: 'genesis/admin/login.html.twig'
            csrf_token_id: Partitura\Controller\Admin\LoginController::CSRF_TOKEN_ID
        partitura_admin_dashboard:
            view: ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Partitura\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Dto/'
            - '../src/Entity/'
            - '../src/Enum/'
            - '../src/Event/'
            - '../src/EventSubscriber/Trait/'
            - '../src/Exception/'
            - '../src/Interfaces/PartituraExceptionInterface.php'
            - '../src/Interfaces/PasswordUpgradableUserInterface.php'
            - '../src/Interfaces/RequestDtoFactoryInterface.php'
            - '../src/Kernel.php'
            - '../src/Log/Trait/'
            - '../src/Repository/Repository.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Component\Security\Core\User\PasswordUpgraderInterface:
        class: Partitura\Service\PasswordUpgradeService

    JMS\Serializer\SerializerBuilder:
        factory: ['JMS\Serializer\SerializerBuilder', 'create']

    JMS\Serializer\Serializer:
        factory: ['@JMS\Serializer\SerializerBuilder', 'build']

    JMS\Serializer\ArrayTransformerInterface:
        alias: JMS\Serializer\Serializer

    JMS\Serializer\SerializerInterface:
        alias: JMS\Serializer\Serializer

    jms_serializer:
        alias: JMS\Serializer\Serializer
        public: true

    Partitura\Command\UserCreateCommand:
        calls:
            - ['setLogger', ['@monolog.logger.user_create_command']]

    Partitura\Command\UserChangePasswordCommand:
        calls:
            - ['setLogger', ['@monolog.logger.user_change_password_command']]

    Partitura\Loader\PostsLoader:
        tags: [routing.loader]

    Partitura\EventSubscriber\PostViewsWriter:
        calls:
            - ['setLogger', ['@monolog.logger.post_views_writer']]

    Partitura\Factory\SettingsDtoFactory:
        public: true

    Partitura\Factory\RouteDataDtoFactory:
        public: true
        arguments:
            $fillerObjects:
                - '@Partitura\Filler\UserFieldValuesFiller'
