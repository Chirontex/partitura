security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        Partitura\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: Partitura\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - Partitura\Security\Authenticator\AdminLoginAuthenticator
            form_login:
                login_path: !php/const \Partitura\Controller\LoginController::ROUTE_LOGIN
                check_path: !php/const \Partitura\Controller\LoginController::ROUTE_LOGIN
                enable_csrf: true
                csrf_token_id: "login"
                default_target_path: !php/const \Partitura\Controller\MainController::ROUTE_INDEX
            logout:
                path: !php/const \Partitura\Controller\Profile\LogoutController::ROUTE_LOGOUT
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 86400
                token_provider:
                    doctrine: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_EDITOR: ROLE_USER
        ROLE_MODERATOR: ROLE_EDITOR
        ROLE_ADMIN: ROLE_MODERATOR
        ROLE_ROOT: ROLE_ADMIN

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_EDITOR }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
